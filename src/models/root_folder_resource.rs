/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RootFolderResource {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "path", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub path: Option<Option<String>>,
    #[serde(rename = "accessible", skip_serializing_if = "Option::is_none")]
    pub accessible: Option<bool>,
    #[serde(rename = "freeSpace", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub free_space: Option<Option<i64>>,
    #[serde(rename = "unmappedFolders", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub unmapped_folders: Option<Option<Vec<crate::models::UnmappedFolder>>>,
}

impl RootFolderResource {
    pub fn new() -> RootFolderResource {
        RootFolderResource {
            id: None,
            path: None,
            accessible: None,
            free_space: None,
            unmapped_folders: None,
        }
    }
}


