/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MovieMetadata {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "tmdbId", skip_serializing_if = "Option::is_none")]
    pub tmdb_id: Option<i32>,
    #[serde(rename = "images", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub images: Option<Option<Vec<crate::models::MediaCover>>>,
    #[serde(rename = "genres", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub genres: Option<Option<Vec<String>>>,
    #[serde(rename = "inCinemas", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub in_cinemas: Option<Option<String>>,
    #[serde(rename = "physicalRelease", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub physical_release: Option<Option<String>>,
    #[serde(rename = "digitalRelease", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub digital_release: Option<Option<String>>,
    #[serde(rename = "certification", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub certification: Option<Option<String>>,
    #[serde(rename = "year", skip_serializing_if = "Option::is_none")]
    pub year: Option<i32>,
    #[serde(rename = "ratings", skip_serializing_if = "Option::is_none")]
    pub ratings: Option<Box<crate::models::Ratings>>,
    #[serde(rename = "collectionTmdbId", skip_serializing_if = "Option::is_none")]
    pub collection_tmdb_id: Option<i32>,
    #[serde(rename = "collectionTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub collection_title: Option<Option<String>>,
    #[serde(rename = "lastInfoSync", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_info_sync: Option<Option<String>>,
    #[serde(rename = "runtime", skip_serializing_if = "Option::is_none")]
    pub runtime: Option<i32>,
    #[serde(rename = "website", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub website: Option<Option<String>>,
    #[serde(rename = "imdbId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub imdb_id: Option<Option<String>>,
    #[serde(rename = "title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub title: Option<Option<String>>,
    #[serde(rename = "cleanTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub clean_title: Option<Option<String>>,
    #[serde(rename = "sortTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sort_title: Option<Option<String>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<crate::models::MovieStatusType>,
    #[serde(rename = "overview", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub overview: Option<Option<String>>,
    #[serde(rename = "alternativeTitles", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub alternative_titles: Option<Option<Vec<crate::models::AlternativeTitle>>>,
    #[serde(rename = "translations", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub translations: Option<Option<Vec<crate::models::MovieTranslation>>>,
    #[serde(rename = "secondaryYear", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub secondary_year: Option<Option<i32>>,
    #[serde(rename = "youTubeTrailerId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub you_tube_trailer_id: Option<Option<String>>,
    #[serde(rename = "studio", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub studio: Option<Option<String>>,
    #[serde(rename = "originalTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub original_title: Option<Option<String>>,
    #[serde(rename = "cleanOriginalTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub clean_original_title: Option<Option<String>>,
    #[serde(rename = "originalLanguage", skip_serializing_if = "Option::is_none")]
    pub original_language: Option<Box<crate::models::Language>>,
    #[serde(rename = "recommendations", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recommendations: Option<Option<Vec<i32>>>,
    #[serde(rename = "popularity", skip_serializing_if = "Option::is_none")]
    pub popularity: Option<f32>,
    #[serde(rename = "isRecentMovie", skip_serializing_if = "Option::is_none")]
    pub is_recent_movie: Option<bool>,
}

impl MovieMetadata {
    pub fn new() -> MovieMetadata {
        MovieMetadata {
            id: None,
            tmdb_id: None,
            images: None,
            genres: None,
            in_cinemas: None,
            physical_release: None,
            digital_release: None,
            certification: None,
            year: None,
            ratings: None,
            collection_tmdb_id: None,
            collection_title: None,
            last_info_sync: None,
            runtime: None,
            website: None,
            imdb_id: None,
            title: None,
            clean_title: None,
            sort_title: None,
            status: None,
            overview: None,
            alternative_titles: None,
            translations: None,
            secondary_year: None,
            you_tube_trailer_id: None,
            studio: None,
            original_title: None,
            clean_original_title: None,
            original_language: None,
            recommendations: None,
            popularity: None,
            is_recent_movie: None,
        }
    }
}


