/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueueResourcePagingResource {
    #[serde(rename = "page", skip_serializing_if = "Option::is_none")]
    pub page: Option<i32>,
    #[serde(rename = "pageSize", skip_serializing_if = "Option::is_none")]
    pub page_size: Option<i32>,
    #[serde(rename = "sortKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sort_key: Option<Option<String>>,
    #[serde(rename = "sortDirection", skip_serializing_if = "Option::is_none")]
    pub sort_direction: Option<crate::models::SortDirection>,
    #[serde(rename = "totalRecords", skip_serializing_if = "Option::is_none")]
    pub total_records: Option<i32>,
    #[serde(rename = "records", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub records: Option<Option<Vec<crate::models::QueueResource>>>,
}

impl QueueResourcePagingResource {
    pub fn new() -> QueueResourcePagingResource {
        QueueResourcePagingResource {
            page: None,
            page_size: None,
            sort_key: None,
            sort_direction: None,
            total_records: None,
            records: None,
        }
    }
}


