/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ParsedMovieInfo {
    #[serde(rename = "movieTitles", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub movie_titles: Option<Option<Vec<String>>>,
    #[serde(rename = "originalTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub original_title: Option<Option<String>>,
    #[serde(rename = "releaseTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_title: Option<Option<String>>,
    #[serde(rename = "simpleReleaseTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub simple_release_title: Option<Option<String>>,
    #[serde(rename = "quality", skip_serializing_if = "Option::is_none")]
    pub quality: Option<Box<crate::models::QualityModel>>,
    #[serde(rename = "languages", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub languages: Option<Option<Vec<crate::models::Language>>>,
    #[serde(rename = "releaseGroup", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_group: Option<Option<String>>,
    #[serde(rename = "releaseHash", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_hash: Option<Option<String>>,
    #[serde(rename = "edition", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub edition: Option<Option<String>>,
    #[serde(rename = "year", skip_serializing_if = "Option::is_none")]
    pub year: Option<i32>,
    #[serde(rename = "imdbId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub imdb_id: Option<Option<String>>,
    #[serde(rename = "tmdbId", skip_serializing_if = "Option::is_none")]
    pub tmdb_id: Option<i32>,
    #[serde(rename = "hardcodedSubs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hardcoded_subs: Option<Option<String>>,
    #[serde(rename = "movieTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub movie_title: Option<Option<String>>,
    #[serde(rename = "primaryMovieTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub primary_movie_title: Option<Option<String>>,
}

impl ParsedMovieInfo {
    pub fn new() -> ParsedMovieInfo {
        ParsedMovieInfo {
            movie_titles: None,
            original_title: None,
            release_title: None,
            simple_release_title: None,
            quality: None,
            languages: None,
            release_group: None,
            release_hash: None,
            edition: None,
            year: None,
            imdb_id: None,
            tmdb_id: None,
            hardcoded_subs: None,
            movie_title: None,
            primary_movie_title: None,
        }
    }
}


